import numpy as np
import pandas as pd
import joblib
import argparse
import logging
import os
import mlflow
import mlflow.sklearn
from model_pipeline import prepare_data, train_model, evaluate_model, save_model, load_model

# Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# D√©finir l'URI de suivi MLflow (local)
MLFLOW_TRACKING_URI = "http://127.0.0.1:5000"
mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
mlflow.set_experiment("Churn Prediction")

def main():
    """Gestion des arguments en ligne de commande."""
    parser = argparse.ArgumentParser(description="Pipeline de Machine Learning pour la pr√©diction du churn avec Random Forest")
    parser.add_argument("--prepare", action="store_true", help="Pr√©parer les donn√©es")
    parser.add_argument("--train", action="store_true", help="Entra√Æner le mod√®le avec suivi MLflow")
    parser.add_argument("--evaluate", action="store_true", help="√âvaluer le mod√®le et enregistrer les m√©triques")
    parser.add_argument("--data_path", type=str, default="merged_churn.csv", help="Chemin du fichier de donn√©es")
    args = parser.parse_args()

    if args.prepare:
        logging.info("üîÑ Pr√©paration des donn√©es...")
        X_train, X_test, y_train, y_test = prepare_data(args.data_path)
        logging.info(f"‚úÖ Donn√©es pr√©par√©es : {X_train.shape[0]} √©chantillons d'entra√Ænement, {X_test.shape[0]} de test.")

    if args.train:
        logging.info("üöÄ Entra√Ænement du mod√®le avec suivi MLflow...")
        X_train, X_test, y_train, y_test= prepare_data(args.data_path)

        with mlflow.start_run():
            model = train_model(X_train, y_train)

            # Log des m√©triques sur le test set
            test_accuracy = evaluate_model(model, X_test, y_test)
            mlflow.log_metric("test_accuracy", test_accuracy)

            save_model(model)
        logging.info("‚úÖ Mod√®le entra√Æn√© et enregistr√©.")

    if args.evaluate:
        logging.info("üìä √âvaluation du mod√®le existant...")
        X_train, X_test, y_train, y_test = prepare_data(args.data_path)
        model = load_model()
        
        if model:
            test_accuracy = evaluate_model(model, X_test, y_test)
            logging.info(f"‚úÖ Pr√©cision du mod√®le sur le test set : {test_accuracy:.4f}")
        else:
            logging.error("‚ùå Impossible de charger le mod√®le pour l'√©valuation.")

if __name__ == "__main__":
    main()
